Problem 4: Write down RECURSIVE definition for correctly parenthesized expressions

isPalindrome when:
i) empty string
ii) single character
iii) c is a character, p is a palindrome, cpc


isPalindrome(string input) 
	parenCnt = 0
	bracketCnt = 0

	if (input is empty AND parenCnt == 0 AND bracketCnt == 0) { // base case 1
		return true
	}
	else if (input is a character AND parenCnt == 0 AND bracketCnt == 0) { // base case 2
		return true
	}
	else {
		buf = first character of input

		if (buf is a letter) {
			isPalindrome(substring of input without first character)
		}
		else if (buf is open parentheses) {
			increase parenCnt by 1
			isPalindrome(substring of input without first character)
		}
		else if (buf is closing parenthesis) {
			if parenCnt > 0 
				decrease parenCnt by 1
				isPalindrome(substring of input without first character)
			else
				return false
		}

		else if (buf is open bracket) {
			increase bracketCnt by 1
			isPalindrome(substring of input without first character)
		}
		else { // buf is closing bracket
			if parenCnt > 0 
				decrease bracketCnt by 1
				isPalindrome(substring of input without first character)
			else
				return false
		}
	}